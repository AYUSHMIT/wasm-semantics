#!/usr/bin/env bash

set -euo pipefail

kwasm_script="$0"
while [[ -h "$kwasm_script" ]]; do
    kwasm_dir="$(cd -P "$(dirname "$kwasm_script")" && pwd)"
    kwasm_script="$(readlink "$kwasm_script")"
    [[ "$kwasm_script" != /* ]] && kwasm_script="$kwasm_dir/$kwasm_script"
done
kwasm_dir="$(cd -P "$(dirname "$kwasm_script")" && pwd)"

build_dir="$kwasm_dir/.build"
release_dir="$build_dir/k/k-distribution/target/release/k"

defn_dir="$build_dir/defn"
ocaml_dir="$defn_dir/ocaml"

test_logs="$build_dir/logs"
test_log="$test_logs/tests.log"
mkdir -p "$test_logs"

# Utilities
# ---------

progress() { echo "== $@" >&2 ; }
die()      { echo -e "FATAL:" "$@" >&2 ; exit 1 ; }

pretty_diff() {
    git --no-pager diff --no-index "$@"
}

# Environment Setup
# -----------------

run_env() {
    local run_file

    run_file="$1"
    export DEFN_DIRECTORY="${DEFN_DIRECTORY:-$ocaml_dir}"
    export PATH="$release_dir/lib/native/linux:$release_dir/lib/native/linux64:$release_dir/bin/:$PATH"
    eval $(opam config env)
}

# Runners
# -------

run_krun() {
    local run_file=$1 ; shift
    run_env "$run_file"
    export K_OPTS=-Xss500m
    krun --directory "$DEFN_DIRECTORY" "$run_file" "$@"
}

run_kdebug() {
    progress "debugging: $1"
    ( run_krun "$1" --debugger )
}

run_test() {
    local test_file expected_file output_file

    test_file="$1" ; shift

    test_log_name="$test_logs/$test_file"
    mkdir -p "$(dirname "$test_log_name")"

    output_file="$test_log_name.out"

    if [[ -f "$test_file.out" ]]; then
        expected_file="$test_file.out"
    else
        expected_file="tests/success.out"
    fi

    [[ -f "$expected_file" ]] \
        || die "Expected output file '$expected_file' does not exist..."

    run_krun "$test_file" > "$output_file"
    pretty_diff "$expected_file" "$output_file"
}

run_test_profile() {
    local test_file exit_status
    local output_log_dir stdout_log stderr_log

    test_file="$1" ; shift

    output_log_dir="$test_logs/$(dirname -- "$test_file")"
    stdout_log="$test_logs/$test_file.stdout"
    stderr_log="$test_logs/$test_file.stderr"
    [[ -d "$output_log_dir" ]] || mkdir -p "$output_log_dir"

    exit_status='0'
    `which time` --quiet --format '%x %es %Us %Ss %MKB %C' --output "$test_log" --append \
        bash -c "$0 test $test_file $@" \
        1> "$stdout_log" 2> "$stderr_log" \
        || exit_status="$?"

    if [[ "$exit_status" == '0' ]]; then
        progress "passed test: $test_file"
    else
        die "failed test: $test_file"
    fi

    exit "$exit_status"
}

# Main
# ----

cd "$(dirname $0)"

# main functionality
run_command="$1" ; shift
case "$run_command" in

    # Running
    run)   run_krun   "$@" ;;
    debug) run_kdebug "$@" ;;

    # Testing
    test)         run_test         "$@" ;;
    test-profile) run_test_profile "$@" ;;

    *) echo "
    usage: $0 <cmd> <file> <K args>*

       # Running
       # -------
       $0 run   <pgm>   Run a single WASM program
       $0 debug <pgm>   Run a single WASM program in the debugger

       Note: <pgm> is a path to a file containing a WASM program.

       # Testing
       # -------
       $0 test         <pgm>    Run a single WASM program like it's a test
       $0 test-profile <pgm>    Same as test, but recording timing and memory usage to $test_log.

       Note: This command is more for devs and CI servers.
" ; exit ;;
esac
