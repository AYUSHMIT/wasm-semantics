diff --git a/wasm-syntax.k b/wasm-syntax.k
index f367d5f..cd8c991 100644
--- a/wasm-syntax.k
+++ b/wasm-syntax.k
@@ -7,14 +7,14 @@ module WASM-SYNTAX
 
   syntax Script ::= Commands
 
-  syntax Commands ::= List{Command, ""}
+  syntax Commands ::= List{Command, ""}                         [klabel('__:Commands)]
   syntax Command  ::= Module
                     | Invoke
 
   syntax Module ::= "(" "module" ModuleItems ")"
   syntax Invoke ::= "(" "invoke" Var Exps ")"
 
-  syntax ModuleItems ::= List{ModuleItem, ""}
+  syntax ModuleItems ::= List{ModuleItem, ""}                   [klabel('__:ModuleItems)]
   syntax ModuleItem  ::= Function
                        | Global
                        | Export
@@ -61,16 +61,16 @@ module WASM-SYNTAX
                 | "(" "print" Exp ")"                           [strict]
 
 
-  syntax Cases ::= List{Case, ""}
+  syntax Cases ::= List{Case, ""}                               [klabel('__:Cases)]
   syntax Case  ::= "(" "case" Literal Exps "fallthru" ")"
                  | "(" "case" Literal Exps            ")"
                  | "(" "case" Literal                 ")"
 
-  syntax Types ::= List{Type, ""}
+  syntax Types ::= List{Type, ""}                               [klabel('__:Types)]
   syntax Type  ::= "i32" | "i64" | "f32" | "f64"
   syntax MemType ::= Type | "i8" | "i16"
 
-  syntax Vars ::= List{Var, ""}
+  syntax Vars ::= List{Var, ""}                                 [klabel('__:Vars)]
   syntax Var  ::= Int
 
   syntax Literal ::= Int | Float
diff --git a/wasm.k b/wasm.k
index e9dd797..bd3e1f6 100644
--- a/wasm.k
+++ b/wasm.k
@@ -86,13 +86,13 @@ module WASM
 
   rule (nop) => unit
 
-  rule (block _:Val Vs:Vals) => (block Vs) requires Vs =/=K .Vals
-  rule (block V:Val   .Vals) => V
+  rule `(block_)`(`__`(_:Val,Vs:Vals) => Vs) requires Vs =/=K .Vals
+  rule `(block_)`(`__`(V:Val,.Vals)) => V
 
   rule (if V:Val S _) => S requires V =/=K 0
   rule (if 0     _ S) => S
 
-  rule (loop Ss) => (block (block Ss) (loop Ss))
+  rule (loop Ss) => `(block_)`(`__`((block Ss), `__`((loop Ss), .Exps)))
 
   rule <k> (label Ss) ~> K => (block Ss) ~> popLabel </k>
        <labelStack> .List => ListItem(K) ... </labelStack>
@@ -108,7 +108,7 @@ module WASM
 
   // TODO: rule (switch ...
 
-  rule <k> (call X:Var Vs:Vals) ~> K => (return (block Ss)) </k>
+  rule <k> `(call__)`(X,Vs:Vals) ~> K => `(return_)`(`__`((block Ss), .Exps)) </k>
        <funcTbl> ... X |-> (func _ _ (local Ls) Ss) ... </funcTbl>
        <callStack> .List => ListItem((Local,K)) ... </callStack>
        <local> Local => initLocal(Vs,Ls,0) </local>
@@ -122,7 +122,7 @@ module WASM
 
   // TODO: rule (dispatch ...
 
-  rule <k> (return Vs:Vals) ~> _ => retval(Vs) ~> K </k>
+  rule <k> `(return_)`(Vs:Vals) ~> _ => retval(Vs) ~> K </k>
        <callStack> ListItem((Local,K)) => .List ... </callStack>
        <local> _ => Local </local>
   //
@@ -131,7 +131,7 @@ module WASM
   rule retval(V Vs) => V           requires Vs ==K .Vals
   rule retval(V Vs) => tuple(V Vs) requires Vs =/=K .Vals
 
-  rule (destruct `X Xs` tuple(V Vs)) => (block (setlocal X V) (destruct Xs tuple(Vs)))
+  rule (destruct `X Xs` tuple(V Vs)) => `(block_)`(`__`((setlocal X V), `__`((destruct Xs tuple(Vs)), .Exps)))
   rule (destruct .Vars tuple(.Vals)) => unit
 
   rule <k> (getlocal X) => V ... </k>
